/*
 * @lc app=leetcode id=45 lang=typescript
 *
 * [45] Jump Game II
 */

// @lc code=start
function jump(nums: number[]): number {
  // 题目保证一定能够有办法跳到最后一步
  // 题目要求最小跳跃次数
  // 一次跳几步，只算一次跳跃次数。比如一次跳3步，跳跃次数为1

  // 每次跳跃之前，我们提前查看下这次跳跃的最远位置是哪里
  // 看完之后我们直接选择可跳位置范围内能够接着让我们走的更远的，离终点更近的那个位置来作为起跳点。选完后，表明我们完成了一次跳跃，step++
  // 这里头的关键做法是不断更新新的最远位置是哪里，以及可跳范围内能够让我们走的更远的位置是哪里

  let max = 0;
  let end = 0; // end代表上一个选择的起跳点所能到达的最远位置
  let step = 0;

  //  从左往右看每个可能的起跳点，我们直接用上帝视角尝试看每个位置能帮助我们走到的最远位置是哪里
  for (let i = 0; i < nums.length - 1; i++) {
    const loc = nums[i] + i; // 每个位置能够走到的最远位置
    max = Math.max(max, loc);

    // 如果我已经来到上一个起跳点所到的最远位置
    // 那么我需要更新一下下一个选择的起跳点所到的最远位置
    if (i === end) {
      // 能这么做的原因是max是下一个起跳点能选的候选起跳点范围内所能跑到的最远位置
      // 比如[2,3,1,1,4]，一开始在位0，它能从位0[2]走1步到位1[3]，或者走2步到位2[1]。for遍历的意思就是提前查看每一个候选起点所能到达的最远位置。end就相当于我们已经在边看候选起跳点的最远位置时，上一个起跳点所能到达的最远位置是不是来到了，来到了我们就选择新的最远位置，因为max已经包含了下一个候选范围的点里头能够走的最远的点，那个max位置其实就对应着这个候选点，说明我们跳到了那个点，同时从这个新的起跳点起跳能够来到了max位置。完成了这个起跳动作，我们将step加上一步，表示我们跳过来了。
      end = max; // max跟候选起跳点当中的某个点是一一对应的。end设置成max，说明跳到了那个点。下一次，我们就会按照这个起跳点所能到达的位置范围里头做新的max尝试。
      step++;
    }
  }

  return step;
};

// 关键点1：提前看候选起跳点的最远位置，实时更新最远距离。
// 关键点2：看完实时max，我们才看上一个起跳点所能来到的最远位置是否已经来到了。来到了势必要选这个起跳范围里对应着max的那个点跳过去。跳过去后自然step++
// @lc code=end

export const jump_game_ii = jump;
